import { PixelEvent } from "../../types";
import { PipelineStage } from "../pipeline-stage";

/**
 * URLInjectionStage
 * 
 * Esta etapa de pipeline a√±ade autom√°ticamente informaci√≥n de URL a los eventos de tipo page_view,
 * organiz√°ndola en un objeto sem√°ntico dentro de event.metadata.
 * 
 * La informaci√≥n se agrupa en un objeto 'page' que contiene:
 * - url: URL completa de la p√°gina
 * - path: Ruta de la p√°gina
 * - search: Par√°metros de b√∫squeda (query string)
 * - host: Dominio del sitio
 * - protocol: Protocolo utilizado (http/https)
 * - hash: Fragmento de la URL (despu√©s de #)
 * - referrer: URL de referencia
 * - timestamp: Momento de la captura de la URL
 */
export class URLInjectionStage implements PipelineStage<PixelEvent, PixelEvent> {
	process(event: PixelEvent): PixelEvent {
		// Solo procesar eventos de tipo 'tracking:tracking-event' que contengan page_view
		if (event.type === 'tracking:tracking-event' && 
			event.data && 
			typeof event.data === 'object' && 
			'eventType' in event.data && 
			event.data.eventType === 'page_view') {

			// Verificar si ya existe informaci√≥n de URL en event.metadata
			const hasExistingPageUrl = event.metadata && 
				typeof event.metadata === 'object' && 
				'page' in event.metadata && 
				typeof event.metadata.page === 'object' &&
				event.metadata.page && 
				'url' in event.metadata.page;
			
			if (!hasExistingPageUrl) {
				// Solo agregar URL autom√°ticamente si estamos en un entorno de navegador
				if (typeof window !== 'undefined' && window.location) {
					// Asegurar que metadata existe
					if (!event.metadata) {
						event.metadata = {};
					}

					// Crear objeto sem√°ntico para informaci√≥n de p√°gina
					const pageInfo = {
						url: window.location.href,
						path: window.location.pathname,
						search: window.location.search,
						host: window.location.host,
						protocol: window.location.protocol,
						hash: window.location.hash,
						referrer: document.referrer || '',
						timestamp: Date.now()
					};
					
					// Asignar al metadata
					event.metadata.page = pageInfo;

					// Tambi√©n a√±adir una versi√≥n simplificada al data del evento
					// para mantener compatibilidad con c√≥digo existente
					if (event.data) {
						(event.data as Record<string, any>).pageUrl = window.location.href;
						(event.data as Record<string, any>).pagePath = window.location.pathname;
					}

					console.log(`[URLInjectionStage] üåê URL generada autom√°ticamente para page_view:`, {
						url: pageInfo.url,
						path: pageInfo.path,
						search: pageInfo.search
					});
				} else {
					console.warn('[URLInjectionStage] ‚ö†Ô∏è No se puede acceder a window.location - entorno no es navegador');
				}
			} else {
				console.log(`[URLInjectionStage] ‚úÖ URL ya presente en metadata, omitiendo inyecci√≥n autom√°tica`);
			}
		}
		console.log(`[URLInjectionStage] üì¶ Evento procesado:`, event);
		return event;
	}
}